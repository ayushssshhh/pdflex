// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  directUrl    = env("DATABASE_URL_UNPOOLED")
  relationMode = "prisma"
}

model User {
  id    String @id @unique //matches kinde user id
  email String @unique

  File    File[] //reln User->File (1:M)
  Message Message[] //reln User->Message (1:M)

  stripeCustomerId       String?   @unique @map(name: "stripe_coustomer_id") //use @map to specify the exact column name you want for a particular field
  stripeSubsriptionId    String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @unique @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
}

// An enum, or enumeration type, is a data type that allows a variable to be a set of predefined constants.
enum UploadStatus {
  PENDING
  PROCESSING
  FAILED
  SUCCESS
}

model File {
  id   String @id @default(cuid()) //@default(cuid()):- prisma will generated unique id
  name String

  uploadStatus UploadStatus @default(PENDING)

  url String //load Pdf in our app
  key String //key use to identify pdf from file hosting provider

  Message Message[] //reln File->Message (1:M)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relation(automatically added by prisma on refresh)
  // reln for user->file is 1:M
  User   User?   @relation(fields: [userId], references: [id])
  userId String?
}

// use to store message for specific file
model Message {
  id   String @id @default(cuid())
  text String @db.Text() //text data type

  isUserMessage Boolean //use to differentiate between user message and open ai message

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
  
  File      File?    @relation(fields: [fileId], references: [id])
  fileId    String?
}
